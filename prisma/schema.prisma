generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  restricted
  user
  admin
}

model user {
  id                Int       @id @default(autoincrement())
  created_time      DateTime  @default(now())
  email            String
  first_name       String?
  last_name        String?
  gender           String?
  profile_image_url String?
  user_id          String    @unique
  subscription     String?
  role             UserRole  @default(restricted)
  voucher_used     String?   // Store the voucher code that was used
  voucher_used_at  DateTime? // When the voucher was used
  monthlyUsage     Float     @default(0) // Monthly usage in seconds with decimals
  monthlyUsageLastReset DateTime @default(now()) // Last time the monthly usage was reset
}

model payments {
  id               Int      @id @default(autoincrement())
  created_time     DateTime @default(now())
  stripe_id        String
  email            String
  amount           String
  payment_time     String
  payment_date     String
  currency         String
  user_id          String
  customer_details String
  payment_intent   String
}

model subscriptions {
  id                        Int      @id @default(autoincrement())
  created_time              DateTime @default(now())
  subscription_id           String
  stripe_user_id            String
  status                    String
  start_date                String
  end_date                  String?
  plan_id                   String
  default_payment_method_id String?
  email                     String
  user_id                   String
}

model subscriptions_plans {
  id           Int      @id @default(autoincrement())
  created_time DateTime @default(now())
  plan_id      String
  name         String
  description  String
  amount       String
  currency     String
  interval     String
}

model invoices {
  id              Int      @id @default(autoincrement())
  created_time    DateTime @default(now())
  invoice_id      String
  subscription_id String
  amount_paid     String
  amount_due      String?
  currency        String
  status          String
  email           String
  user_id         String?
}

model video {
  id          Int      @id @default(autoincrement())
  jobId       String?  @unique
  userId      String
  prompt      String
  status      String   @default("queued") // queued, processing, completed, failed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  modelName   String?
  frames      Int?     // number of frames in the video
  url         String?
  error       String?
  retryCount  Int      @default(0)
  
  // RunPod input parameters
  negativePrompt String?
  width         Int?
  height        Int?
  seed          Int?
  steps         Int?
  cfg           Float?

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model terms_acceptance {
  id        Int      @id @default(autoincrement())
  userId    String
  version   String
  acceptedAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, version])
  @@index([userId])
}

model voucher {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expiresAt   DateTime // when the voucher expires
  isActive    Boolean  @default(true)
  createdBy   String   // admin's user_id who created it

  @@index([code])
}
